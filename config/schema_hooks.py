"""
Schema postprocessing hooks for merging Django-Allauth Headless OpenAPI spec
with DRF Spectacular's generated schema.

This allows us to have a unified API documentation showing both:
- Custom DRF endpoints (users, location, payment, etc.)
- Django-Allauth authentication endpoints (signup, login, session, etc.)
"""

import hashlib

from django.test import Client

HTTP_METHODS = {"get", "post", "put", "patch", "delete", "options", "head", "trace"}
HTTP_OK = 200  # HTTP 200 OK status code


def merge_allauth_spec(result, generator=None, request=None, public=False, **kwargs):
    """
    Merge Django-Allauth Headless OpenAPI specification into the main API schema.

    This postprocessing hook:
    1. Fetches allauth's OpenAPI spec from /_allauth/openapi.json
    2. Adds operation IDs to all allauth endpoints
    3. Prefixes allauth tags with "Authentication /" for better organization
    4. Merges paths and components into the main schema
    5. Adds a top-level "Authentication" tag

    Args:
        result: The base OpenAPI schema generated by DRF Spectacular
        generator: Schema generator instance (unused)
        request: HTTP request object (unused)
        public: Whether this is for public API docs (unused)
        **kwargs: Additional arguments (unused)

    Returns:
        Modified OpenAPI schema with allauth endpoints merged in
    """
    # Step 1: Fetch allauth's OpenAPI schema
    c = Client()
    resp = c.get("/api/_allauth/openapi.json")

    # If allauth schema is not available, return original schema
    if resp.status_code != HTTP_OK:
        return result

    ext = resp.json()

    # Step 2: Process allauth paths and operations
    for path, item in (ext.get("paths") or {}).items():
        for method, op in list(item.items()):
            # Skip non-HTTP methods
            if method.lower() not in HTTP_METHODS or not isinstance(op, dict):
                continue

            # Add missing operationId (required for client generation)
            # Format: allauth_post_a1b2c3d4
            # Note: MD5 is used for hashing only, not for security
            op.setdefault(
                "operationId",
                f"allauth_{method}_{hashlib.md5(path.encode('utf-8'), usedforsecurity=False).hexdigest()[:8]}",
            )

            # Prefix tags for better organization in Swagger UI
            # "Signup" -> "Authentication / Signup"
            old_tags = op.get("tags") or ["Other"]
            new_tags = [f"Authentication / {t}" for t in old_tags]
            op["tags"] = new_tags

    # Step 3: Merge paths from allauth into main schema
    result.setdefault("paths", {}).update(ext.get("paths", {}) or {})

    # Step 4: Merge components (schemas, securitySchemes, etc.)
    base_comps = result.setdefault("components", {})
    for section, items in (ext.get("components") or {}).items():
        base_comps.setdefault(section, {}).update(items or {})

    # Step 5: Add top-level "Authentication" tag for better Swagger UI organization
    tags = result.setdefault("tags", [])
    if not any(t.get("name") == "Authentication" for t in tags):
        tags.insert(
            0,
            {
                "name": "Authentication",
                "description": (
                    "Authentication endpoints powered by Django-Allauth Headless. "
                    "Includes signup, login, logout, password reset, email verification, "
                    "and session management."
                ),
            },
        )

    return result
