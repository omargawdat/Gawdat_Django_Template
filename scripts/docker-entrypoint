#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

# Fetch secrets from AWS Secrets Manager if not running locally
if [ "$IS_LOCAL" != "true" ]; then
    eval "$(python /app/scripts/fetch_secrets.py)"
fi

# Set Django settings module based on environment
if [ "$IS_LOCAL" = "true" ]; then
    export DJANGO_SETTINGS_MODULE="config.settings.local"
else
    export DJANGO_SETTINGS_MODULE="config.settings.prod"
fi

# Wait for PostgreSQL
# Extract host and port from DATABASE_URL (format: postgis://user:pass@host:port/dbname)  # pragma: allowlist secret
if [[ "$DATABASE_URL" =~ @([^:]+):([0-9]+)/ ]]; then
    DB_HOST="${BASH_REMATCH[1]}"
    DB_PORT="${BASH_REMATCH[2]}"
    wait-for-it "${DB_HOST}:${DB_PORT}" -t 30
    >&2 echo 'PostgreSQL is available'
fi

# If arguments are provided, execute them
if [ "$#" -gt 0 ]; then
    exec "$@"
fi

# Run Django migrations
python manage.py migrate
python manage.py loadcountries --download-flags
python manage.py loadzones
python manage.py createsu
python manage.py createcachetable

# Load fixtures in development environment only
if [ "$ENVIRONMENT" = "development" ]; then
    python manage.py loadfixtures
fi

if [ "$IS_LOCAL" = "true" ]; then
    exec python manage.py runserver_plus 0.0.0.0:8000
else
    python manage.py collectstatic --noinput --clear
    exec gunicorn config.wsgi \
        --bind 0.0.0.0:5000 \
        --chdir=/app \
        --workers 3 \
        --threads 2 \
        --worker-class gevent \
        --worker-connections 1000 \
        --max-requests 1000 \
        --max-requests-jitter 50 \
        --timeout 60 \
        --keep-alive 5
fi
