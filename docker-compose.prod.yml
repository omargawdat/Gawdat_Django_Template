volumes:
  production_postgres_data: { }
  production_postgres_data_backups: { }
  production_traefik: { }

services:
  django:
    build:
      context: .
      dockerfile: compose/prod/django/Dockerfile
    depends_on:
      - postgres
      - redis
    environment:
      # Django environment variables
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_ADMIN_URL=${DJANGO_ADMIN_URL}
      # Database environment variables
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: /start

  postgres:
    build:
      context: .
      dockerfile: compose/prod/postgres/Dockerfile
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  traefik:
    build:
      context: .
      dockerfile: compose/prod/traefik/Dockerfile
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
    environment:
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}

  redis:
    image: docker.io/redis:6

  awscli:
    build:
      context: .
      dockerfile: compose/prod/aws/Dockerfile
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
    volumes:
      - production_postgres_data_backups:/backups:z
