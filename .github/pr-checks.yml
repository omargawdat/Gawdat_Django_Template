name: CI

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: [ 'main' ]
  push:
    branches: [ 'main' ]

jobs:
  check_branch_sync:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if Branch is Up-to-date with Main
        run: |
          git fetch origin main
          if ! git merge-base --is-ancestor origin/main HEAD; then
            echo "‚ùå Your branch is not up-to-date with 'main'. Please merge or rebase."
            exit 1
          fi

  linter:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  build_and_test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
      - name: Setup Environment File
        run: cp dummy.env .env
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Build Stack
        run: docker compose -f docker-compose.local.yml build
      - name: Check for Missing Migrations
        run: docker compose -f docker-compose.local.yml run --rm django python manage.py makemigrations --check --dry-run
      - name: Apply DB Migrations
        run: docker compose -f docker-compose.local.yml run --rm django python manage.py migrate --noinput
      - name: Django System Checks
        run: docker compose -f docker-compose.local.yml run --rm django python manage.py check
      - name: Django Unit Tests
        run: docker compose -f docker-compose.local.yml run --rm django pytest
      - name: Tear down the Stack
        if: always()
        run: docker compose -f docker-compose.local.yml down -v

  docker_build_and_push:
    runs-on: ubuntu-latest
    needs: [ linter, build_and_test ]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}
      - name: Authenticate to AWS ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build --build-arg is_local=false -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "Docker image successfully pushed to: $IMAGE_URI"
