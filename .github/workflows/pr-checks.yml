name: PR Build Check

on:
  pull_request:
    branches: [ master, main ]
    paths-ignore: [ docs/** ]
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check_branch:
    name: Verify Branch Status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Branch Sync
        run: |
          git fetch origin ${{ github.base_ref }}
          if git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
            echo "‚úÖ Branch is current with ${{ github.base_ref }}"
          else
            echo "‚ùå Branch diverged from ${{ github.base_ref }}"
            exit 1
          fi

  build_and_deploy:
    name: Build and Deploy
    needs: check_branch
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.number }}
      DOMAIN_NAME: pr-${{ github.event.number }}.gawdat.eramapps.com
      S3_BUCKET_NAME: pr-${{ github.event.number }}-gawdat
      DB_NAME: pr_${{ github.event.number }}_appdb
      IS_LOCAL: "false"
      TEST_MODE: "true"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run Pre-commit Checks
        uses: pre-commit/action@v3.0.1

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: app:latest
          build-args: is_local=${{ env.IS_LOCAL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare Test Database
        run: |
          docker run --rm \
            -e PGPASSWORD=${{ secrets.DB_PASSWORD }} \
            postgres:alpine \
            sh -c "
              psql -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} -U ${{ secrets.DB_USER }} \
                -c 'DROP DATABASE IF EXISTS ${{ env.DB_NAME }};' \
                -c 'CREATE DATABASE ${{ env.DB_NAME }} WITH TEMPLATE ${{ secrets.DB_DEV_NAME }};'
            "

      - name: Execute Test Suite
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e DOMAIN_NAME=${{ env.DOMAIN_NAME }} \
            -e S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ env.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e IS_LOCAL=${{ env.IS_LOCAL }} \
            -e TEST_MODE=${{ env.TEST_MODE }} \
            app \
            /bin/bash -c "
              set -ex
              python manage.py makemigrations --check
              python manage.py migrate
              pytest
            "

      - name: Configure AWS Access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Authenticate with ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker tag app:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      - name: Deploy to App Runner
        id: apprunner-deploy
        uses: awslabs/amazon-app-runner-deploy@main
        with:
          service: pr-${{ env.PR_NUMBER }}-service
          image: ${{ steps.ecr-login.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          access-role-arn: ${{ secrets.ROLE_ARN }}
          region: ${{ secrets.AWS_REGION_NAME }}
          cpu: 1
          memory: 2
          port: 5000
          wait-for-service-stability-seconds: 1200
          copy-env-vars: |
            DOMAIN_NAME
            S3_BUCKET_NAME
            DB_HOST
            DB_PORT
            DB_NAME
            DB_USER
            DB_PASSWORD
            IS_LOCAL
            PR_NUMBER

      - name: Verify Deployment Health
        run: |
          STATUS=$(aws apprunner describe-service \
            --service-arn ${{ steps.apprunner-deploy.outputs.service-arn }} \
            --query 'Service.Status' \
            --output text \
            --region ${{ secrets.AWS_REGION_NAME }})

          if [ "$STATUS" != "RUNNING" ]; then
            echo "‚ùå Deployment failed with status: $STATUS"
            exit 1
          fi

      - name: Output Service URL
        run:
          echo "üåê App Runner URL: ${{ steps.apprunner-deploy.outputs.service-url }}"

  cleanup_on_pr_close:
    name: Cleanup Resources
    if: github.event.action == 'closed' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.number }}
      DB_NAME: pr_${{ github.event.number }}_appdb
    steps:
      - name: Configure AWS Access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Remove App Runner Service
        run: |
          SERVICE_NAME="pr-${{ env.PR_NUMBER }}-service"
          SERVICE_ARN=$(aws apprunner list-services \
            --query "ServiceSummaryList[?ServiceName=='${SERVICE_NAME}'].ServiceArn" \
            --output text)

          if [ -n "$SERVICE_ARN" ]; then
            aws apprunner delete-service --service-arn $SERVICE_ARN
            aws apprunner wait service-deleted --service-arn $SERVICE_ARN
            echo "‚úÖ Successfully removed service: ${SERVICE_NAME}"
          fi

      - name: Drop Test Database
        run: |
          docker run --rm \
            -e PGPASSWORD=${{ secrets.DB_PASSWORD }} \
            postgres:alpine \
            psql -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} -U ${{ secrets.DB_USER }} \
              -c "DROP DATABASE IF EXISTS ${{ env.DB_NAME }};"
