name: PR Build Check

on:
  pull_request:
    branches: [ master, main ]
    paths-ignore: [ docs/** ]
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check_branch:
    name: Verify Branch Status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Branch Sync
        run: |
          git fetch origin ${{ github.base_ref }}
          if ! git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
            echo "❌ Branch diverged from ${{ github.base_ref }}"
            exit 1
          fi

  build_and_deploy:
    name: Build and Deploy
    needs: check_branch
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.number }}
      PARENT_DOMAIN: ${{ secrets.PARENT_DOMAIN }}
      DOMAIN_NAME: pr-${{ github.event.number }}.${{ secrets.PARENT_DOMAIN }}
      S3_BUCKET_NAME: pr-${{ github.event.number }}-gawdat
      DB_NAME: pr_${{ github.event.number }}_appdb
      IS_LOCAL: "false"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION_NAME: ${{ secrets.AWS_REGION_NAME }}
      AWS_SECRET_MANAGER_NAME: ${{ secrets.AWS_SECRET_MANAGER_NAME }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run Pre-commit Checks
        uses: pre-commit/action@v3.0.1

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: app:latest
          build-args: is_local=${{ env.IS_LOCAL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Clone database from dev for migration testing
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          # Only create database if it doesn't exist
          PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} -U ${{ secrets.DB_USER }} -tc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1 || {
            echo "Creating database ${DB_NAME} from template..."
            PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h ${{ secrets.DB_HOST }} -p ${{ secrets.DB_PORT }} -U ${{ secrets.DB_USER }} -c "CREATE DATABASE ${DB_NAME} WITH TEMPLATE ${{ secrets.DB_DEV_NAME }};"
            echo "Database ${DB_NAME} successfully cloned from ${{ secrets.DB_DEV_NAME}}."
          }

      - name: Execute Test Suite
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION_NAME=${{ secrets.AWS_REGION_NAME }} \
            -e AWS_SECRET_MANAGER_NAME=${{ secrets.AWS_SECRET_MANAGER_NAME }} \
            -e DOMAIN_NAME=${{ env.DOMAIN_NAME }} \
            -e S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ env.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e IS_LOCAL=${{ env.IS_LOCAL }} \
            -e TEST_MODE="true" \
            app \
            /bin/bash -c "
              set -ex
              python manage.py makemigrations --check
              python manage.py migrate
              pytest
            "

      - name: Configure AWS Access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Authenticate with ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate ECR Image URI
        id: ecr-image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ github.sha }}"
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Created image URI: ${IMAGE_URI}"

      - name: Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker tag app:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.10.5'

      - name: Deploy to App Runner using script
        run: |
          chmod +x ./scripts/deploy.sh
          ./scripts/deploy.sh \
            --key "prod/terraform.tfstate" \
            --parent-domain "${{ env.PARENT_DOMAIN }}" \
            --domain-name "${{ env.DOMAIN_NAME }}" \
            --ecr-image-identifier "${{ steps.ecr-image.outputs.IMAGE_URI }}" \
            --container-port "5000" \
            --media-bucket-name "${{ env.S3_BUCKET_NAME }}" \
            --secret-manager-name "${{ env.AWS_SECRET_MANAGER_NAME }}" \
            --db-name "${{ env.DB_NAME }}" \
            --region "eu-central-1" \
            --state-bucket "gawdat-company-terraform-states" \
            --dynamodb-table "gawdat-company-terraform-locks" \
            --apprunner-ecr-role-arn "arn:aws:iam::975049989256:role/apprunner-ecr-access-role-new" \
            --apprunner-instance-role-arn "arn:aws:iam::975049989256:role/temp-instance-role"
