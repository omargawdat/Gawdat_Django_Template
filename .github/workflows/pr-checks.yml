name: PR Checks & Ephemeral Deploy
on: [pull_request]

env:
  AWS_REGION: us-east-1
  ECR_URI: 123456789.dkr.ecr.us-east-1.amazonaws.com/myapp

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django checks
        run: python manage.py check --deploy --fail-level WARNING

      - name: Run unit tests
        run: pytest tests/unit/ --cov=.

  deploy-ephemeral:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_URI:$GITHUB_SHA .
          aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_URI
          docker push $ECR_URI:$GITHUB_SHA

      - name: Deploy to App Runner (Ephemeral)
        run: |
          aws apprunner create-service \
            --service-name pr-${{ github.event.number }} \
            --source-configuration '{
              "ImageRepository": {
                "ImageIdentifier": "'$ECR_URI:$GITHUB_SHA'",
                "ImageRepositoryType": "ECR"
              }
            }' \
            --environment-variables '[
              {"Name": "DB_HOST", "Value": "${{ secrets.EPHEMERAL_DB_HOST }}"},
              {"Name": "DB_USER", "Value": "${{ secrets.DB_USER }}"},
              {"Name": "DB_PASSWORD", "Value": "${{ secrets.DB_PASSWORD }}"}
            ]'
